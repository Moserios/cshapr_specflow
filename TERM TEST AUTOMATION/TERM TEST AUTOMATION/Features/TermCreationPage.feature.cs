// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TERM_TEST_AUTOMATION.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Testing Creation of TERMs")]
    public partial class TestingCreationOfTERMsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TermCreationPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Testing Creation of TERMs", "\tTo get access to the web application User has to login with correct credentials", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("User is at the login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("User enters \"Admin\" as a username", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
  testRunner.And("User clicks the login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.Then("User should be at the Term Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Positive cases for creating a TERM")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        [NUnit.Framework.CategoryAttribute("CreateTermScenario")]
        [NUnit.Framework.TestCaseAttribute("unchecked", "Basic Terms", "ShortName", "ShortDescription", "ShortSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "Basic Terms", "ShortName", "ShortDescription", "ShortSummary", null)]
        [NUnit.Framework.TestCaseAttribute("unchecked", "Jurisdiction", "ShortName", "ShortDescription", "ShortSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "Jurisdiction", "ShortName", "ShortDescription", "ShortSummary", null)]
        [NUnit.Framework.TestCaseAttribute("unchecked", "Basic Terms", "MaxLengthName", "MaxLengthDescription", "MaxLengthSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "Basic Terms", "MaxLengthName", "MaxLengthDescription", "MaxLengthSummary", null)]
        [NUnit.Framework.TestCaseAttribute("unchecked", "Jurisdiction", "MaxLengthName", "MaxLengthDescription", "MaxLengthSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "Jurisdiction", "MaxLengthName", "MaxLengthDescription", "MaxLengthSummary", null)]
        [NUnit.Framework.TestCaseAttribute("unchecked", "Basic Terms", "ShortName", "", "ShortSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "Basic Terms", "MaxLengthName", "", "MaxLengthSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "Basic Terms", "MaxLengthName", "MaxLengthDescription", "OverMaxLengthSummary", null)]
        [NUnit.Framework.TestCaseAttribute("checked", "0", "0", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("unchecked", "0", "0", "", "0", null)]
        public virtual void PositiveCasesForCreatingATERM(string keyTerm, string category, string termName, string description, string summary, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PositiveTests",
                    "CreateTermScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("KeyTerm", keyTerm);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("TermName", termName);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Summary", summary);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Positive cases for creating a TERM", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 13
 testRunner.Given("User on the template creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When("User clicks \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
  testRunner.And(string.Format("User sets checkbox \'KeyTerm\' to \"{0}\"", keyTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
  testRunner.And(string.Format("User selects \"{0}\" in \'Category/Subcategory\' dropdown", category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
  testRunner.And(string.Format("User enters \"{0}\" in \'Term Name\' field", termName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
  testRunner.And(string.Format("User enters \"{0}\" in \'Description\' field (if provided)", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
  testRunner.And(string.Format("User enters \"{0}\" in \'Summary\' field", summary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("Alert with message \'Template has been saved\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
  testRunner.And(string.Format("User searches for \"{0}\" in \'Search field\' and clicks", termName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
  testRunner.And(string.Format("Template has \"{0}\" state", keyTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
  testRunner.And(string.Format("Template has \'Category/Subcategory\' like \"{0}\"", category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And(string.Format("Template has \'Term Name\' like \"{0}\"", termName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
  testRunner.And(string.Format("Template has \'Term Template Key\' like \"{0}\"", termName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
  testRunner.And(string.Format("Template has \'Description\' like \"{0}\" (if provided)", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
  testRunner.And(string.Format("Template has \'Summary\' like \"{0}\"", summary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
  testRunner.And(string.Format("User checks the Template with name \"{0}\" not found", termName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filling the form for TERM creation and cancelling not creates TERM or errors")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public virtual void FillingTheFormForTERMCreationAndCancellingNotCreatesTERMOrErrors()
        {
            string[] tagsOfScenario = new string[] {
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filling the form for TERM creation and cancelling not creates TERM or errors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 55
 testRunner.Given("User on the template creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.When("User clicks \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
  testRunner.And("User changes checkbox \'KeyTerm\' to \"checked\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
  testRunner.And("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
  testRunner.And("User enters \"ShortName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
  testRunner.And("User enters \"ShortDescription\" in \'Description\' field (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
  testRunner.And("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
  testRunner.And("User clicks \'Cancel\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing existing TERM with all Short Length values")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        [NUnit.Framework.CategoryAttribute("EditTermScenario")]
        public virtual void EditingExistingTERMWithAllShortLengthValues()
        {
            string[] tagsOfScenario = new string[] {
                    "PositiveTests",
                    "EditTermScenario"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing existing TERM with all Short Length values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table1.AddRow(new string[] {
                            "KeyTerm",
                            "unchecked"});
                table1.AddRow(new string[] {
                            "Category",
                            "Basic Terms"});
                table1.AddRow(new string[] {
                            "TermName",
                            "ShortName"});
                table1.AddRow(new string[] {
                            "Description",
                            "ShortDescription"});
                table1.AddRow(new string[] {
                            "Summary",
                            "ShortSummary"});
#line 74
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table1, "Given ");
#line hidden
#line 81
 testRunner.When("User changes checkbox \'KeyTerm\' to \"checked\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
  testRunner.And("User changes \'Category/Subcategory\' dropdown to \"Jurisdiction\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
  testRunner.And("User changes \'Term Name\' field to \"MaxLengthName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
  testRunner.And("User changes \'Description\' field to \"MaxLengthDescription\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
  testRunner.And("User changes \'Summary\' field to \"MaxLengthSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.Then("Alert with message \'Template has been saved\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
  testRunner.And("User searches for \"MaxLengthName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
  testRunner.And("Template has \"checked\" state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
  testRunner.And("Template has \'Category/Subcategory\' like \"Jurisdiction\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
  testRunner.And("Template has \'Term Name\' like \"MaxLengthName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
  testRunner.And("Template has \'Term Template Key\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
  testRunner.And("Template has \'Description\' like \"MaxLengthDescription\" (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
  testRunner.And("Template has \'Summary\' like \"MaxLengthSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
  testRunner.And("User checks the Template with name \"MaxLengthName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing existing TERM changin Short Length Name value to Over Max Length Name")]
        [NUnit.Framework.CategoryAttribute("NegativeTests")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void EditingExistingTERMChanginShortLengthNameValueToOverMaxLengthName()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTests",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing existing TERM changin Short Length Name value to Over Max Length Name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table2.AddRow(new string[] {
                            "KeyTerm",
                            "unchecked"});
                table2.AddRow(new string[] {
                            "Category",
                            "Basic Terms"});
                table2.AddRow(new string[] {
                            "TermName",
                            "ShortName"});
                table2.AddRow(new string[] {
                            "Description",
                            "ShortDescription"});
                table2.AddRow(new string[] {
                            "Summary",
                            "ShortSummary"});
#line 102
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table2, "Given ");
#line hidden
#line 109
 testRunner.When("User changes \'Term Name\' field to \"OverMaxLengthName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.Then("\'Term Name field length\' error is \'Shown\' with message \'Error: Term Name has exce" +
                        "eded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
  testRunner.And("User clicks \'Cancel\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
  testRunner.And("User checks the Template with name \"MaxLengthName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
  testRunner.And("User searches for \"ShortName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
  testRunner.And("Template has \"unchecked\" state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
  testRunner.And("Template has \'Category/Subcategory\' like \"Basic Terms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
  testRunner.And("Template has \'Term Name\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
  testRunner.And("Template has \'Term Template Key\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
  testRunner.And("Template has \'Description\' like \"ShortDescription\" (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
  testRunner.And("Template has \'Summary\' like \"ShortSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing existing TERM with Max Length values and empty Description")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        [NUnit.Framework.CategoryAttribute("EditTermScenario")]
        public virtual void EditingExistingTERMWithMaxLengthValuesAndEmptyDescription()
        {
            string[] tagsOfScenario = new string[] {
                    "PositiveTests",
                    "EditTermScenario"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing existing TERM with Max Length values and empty Description", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table3.AddRow(new string[] {
                            "KeyTerm",
                            "checked"});
                table3.AddRow(new string[] {
                            "Category",
                            "Budgets"});
                table3.AddRow(new string[] {
                            "TermName",
                            "MaxLengthName"});
                table3.AddRow(new string[] {
                            "Description",
                            ""});
                table3.AddRow(new string[] {
                            "Summary",
                            "MaxLengthSummary"});
#line 128
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table3, "Given ");
#line hidden
#line 135
 testRunner.When("User changes checkbox \'KeyTerm\' to \"unchecked\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
  testRunner.And("User changes \'Category/Subcategory\' dropdown to \"Conflicts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
  testRunner.And("User changes \'Term Name\' field to \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
  testRunner.And("User changes \'Description\' field to \"ShortDescription\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
  testRunner.And("User changes \'Summary\' field to \"ShortSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.Then("Alert with message \'Template has been saved\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
  testRunner.And("User searches for \"ShortName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
  testRunner.And("Template has \"unchecked\" state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
  testRunner.And("Template has \'Category/Subcategory\' like \"Conflicts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
  testRunner.And("Template has \'Term Name\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
  testRunner.And("Template has \'Term Template Key\' like \"MaxLengthName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
  testRunner.And("Template has \'Description\' like \"ShortDescription\" (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
  testRunner.And("Template has \'Summary\' like \"ShortSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing existing TERM changing Short Length Description value to Over Max Length " +
            "Description")]
        [NUnit.Framework.CategoryAttribute("NegativeTests")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void EditingExistingTERMChangingShortLengthDescriptionValueToOverMaxLengthDescription()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTests",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing existing TERM changing Short Length Description value to Over Max Length " +
                    "Description", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table4.AddRow(new string[] {
                            "KeyTerm",
                            "unchecked"});
                table4.AddRow(new string[] {
                            "Category",
                            "Basic Terms"});
                table4.AddRow(new string[] {
                            "TermName",
                            "ShortName"});
                table4.AddRow(new string[] {
                            "Description",
                            "ShortDescription"});
                table4.AddRow(new string[] {
                            "Summary",
                            "ShortSummary"});
#line 156
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table4, "Given ");
#line hidden
#line 163
 testRunner.When("User changes \'Description\' field to \"OverMaxLengthDescription\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.Then("\'Description field length\' error is \'Shown\' with message \'Error: Description has " +
                        "exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
  testRunner.And("User clicks \'Cancel\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
  testRunner.And("User searches for \"ShortName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
  testRunner.And("Template has \"unchecked\" state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
  testRunner.And("Template has \'Category/Subcategory\' like \"Basic Terms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
  testRunner.And("Template has \'Term Name\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
  testRunner.And("Template has \'Term Template Key\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
  testRunner.And("Template has \'Description\' like \"ShortDescription\" (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
  testRunner.And("Template has \'Summary\' like \"ShortSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing existing TERM changing Short Length values to empty values")]
        [NUnit.Framework.CategoryAttribute("NegativeTests")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void EditingExistingTERMChangingShortLengthValuesToEmptyValues()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTests",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing existing TERM changing Short Length values to empty values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table5.AddRow(new string[] {
                            "KeyTerm",
                            "unchecked"});
                table5.AddRow(new string[] {
                            "Category",
                            "Basic Terms"});
                table5.AddRow(new string[] {
                            "TermName",
                            "ShortName"});
                table5.AddRow(new string[] {
                            "Description",
                            "ShortDescription"});
                table5.AddRow(new string[] {
                            "Summary",
                            "ShortSummary"});
#line 181
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table5, "Given ");
#line hidden
#line 188
 testRunner.When("User changes \'Category/Subcategory\' dropdown to \"-- Select Category --\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
  testRunner.And("User changes \'Term Name\' field to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
  testRunner.And("User changes \'Description\' field to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
  testRunner.And("User changes \'Summary\' field to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Shown\' with message \'Error: Category mu" +
                        "st be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
  testRunner.And("\'Term Name field empty\' error is \'Shown\' with message \'Error: Term Name must be s" +
                        "pecified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
  testRunner.And("\'Summary field empty\' error is \'Shown\' with message \'Error: Summary must be speci" +
                        "fied.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
  testRunner.And("User clicks \'Cancel\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
  testRunner.And("User searches for \"ShortName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
  testRunner.And("Template has \"unchecked\" state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
  testRunner.And("Template has \'Category/Subcategory\' like \"Basic Terms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
  testRunner.And("Template has \'Term Name\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
  testRunner.And("Template has \'Term Template Key\' like \"ShortName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
  testRunner.And("Template has \'Description\' like \"ShortDescription\" (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
  testRunner.And("Template has \'Summary\' like \"ShortSummary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Category, TermName and Summary fields empty and validation a" +
            "fter clicking Save button")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithCategoryTermNameAndSummaryFieldsEmptyAndValidationAfterClickingSaveButton()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Category, TermName and Summary fields empty and validation a" +
                    "fter clicking Save button", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 213
 testRunner.Given("User on the template creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 214
  testRunner.And("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
  testRunner.And("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.When("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 222
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Shown\' with message \'Error: Category mu" +
                        "st be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
  testRunner.And("\'Term Name field empty\' error is \'Shown\' with message \'Error: Term Name must be s" +
                        "pecified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 225
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
  testRunner.And("\'Summary field empty\' error is \'Shown\' with message \'Error: Summary must be speci" +
                        "fied.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Category field populated and TermName and Summary fields fil" +
            "led with spaces")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithCategoryFieldPopulatedAndTermNameAndSummaryFieldsFilledWithSpaces()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Category field populated and TermName and Summary fields fil" +
                    "led with spaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 230
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 231
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 232
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
 testRunner.When("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
  testRunner.And("User enters \"      \" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
  testRunner.And("User enters \"      \" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
  testRunner.And("\'Term Name field empty\' error is \'Shown\' with message \'Error: Term Name must be s" +
                        "pecified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
  testRunner.And("\'Summary field empty\' error is \'Shown\' with message \'Error: Summary must be speci" +
                        "fied.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
  testRunner.And("User checks the Template with name \"      \" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Category field populated and TermName and Summary fields emp" +
            "ty")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithCategoryFieldPopulatedAndTermNameAndSummaryFieldsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Category field populated and TermName and Summary fields emp" +
                    "ty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 247
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 248
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.When("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 250
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
  testRunner.And("\'Term Name field empty\' error is \'Shown\' with message \'Error: Term Name must be s" +
                        "pecified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 255
  testRunner.And("\'Summary field empty\' error is \'Shown\' with message \'Error: Summary must be speci" +
                        "fied.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Category and TermName fields populated and Summary field emp" +
            "ty")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithCategoryAndTermNameFieldsPopulatedAndSummaryFieldEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Category and TermName fields populated and Summary field emp" +
                    "ty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 259
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 260
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 261
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.When("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 263
  testRunner.And("User enters \"ShortName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 267
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 269
  testRunner.And("\'Summary field empty\' error is \'Shown\' with message \'Error: Summary must be speci" +
                        "fied.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Category and Summary fields populated and TermName field emp" +
            "ty")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithCategoryAndSummaryFieldsPopulatedAndTermNameFieldEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Category and Summary fields populated and TermName field emp" +
                    "ty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 275
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 276
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
 testRunner.When("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 278
  testRunner.And("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 280
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 281
  testRunner.And("\'Term Name field empty\' error is \'Shown\' with message \'Error: Term Name must be s" +
                        "pecified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 282
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 283
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with TermName field populated and Category and Summary fields emp" +
            "ty")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithTermNameFieldPopulatedAndCategoryAndSummaryFieldsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with TermName field populated and Category and Summary fields emp" +
                    "ty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 288
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 289
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 290
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
 testRunner.When("User enters \"ShortName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 292
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Shown\' with message \'Error: Category mu" +
                        "st be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 297
  testRunner.And("\'Summary field empty\' error is \'Shown\' with message \'Error: Summary must be speci" +
                        "fied.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 298
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Summary field populated and Category and TermName fields emp" +
            "ty")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithSummaryFieldPopulatedAndCategoryAndTermNameFieldsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Summary field populated and Category and TermName fields emp" +
                    "ty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 302
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 303
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 304
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
 testRunner.When("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 306
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 307
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Shown\' with message \'Error: Category mu" +
                        "st be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
  testRunner.And("\'Term Name field empty\' error is \'Shown\' with message \'Error: Term Name must be s" +
                        "pecified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 309
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 310
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 311
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with TermName and Summary fields populated and Category field emp" +
            "ty")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithTermNameAndSummaryFieldsPopulatedAndCategoryFieldEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with TermName and Summary fields populated and Category field emp" +
                    "ty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 316
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 317
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 318
 testRunner.When("User enters \"ShortName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 319
  testRunner.And("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 320
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 321
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Shown\' with message \'Error: Category mu" +
                        "st be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 322
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 323
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 324
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with TermName field length more than 256 chars")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithTermNameFieldLengthMoreThan256Chars()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with TermName field length more than 256 chars", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 330
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 331
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 332
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 333
 testRunner.When("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 334
  testRunner.And("User enters \"OverMaxLengthName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 335
  testRunner.And("User enters \"ShortDescription\" in \'Description\' field (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
  testRunner.And("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 337
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 339
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 340
  testRunner.And("\'Term Name field length\' error is \'Shown\' with message \'Error: Term Name has exce" +
                        "eded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 341
  testRunner.And("\'Description field length\' error is \'Hidden\' with message \'Error: Description has" +
                        " exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 342
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 343
  testRunner.And("User checks the Template with name \"OverMaxLengthName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with Description field length more than 256 chars")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithDescriptionFieldLengthMoreThan256Chars()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with Description field length more than 256 chars", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 347
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 348
 testRunner.Given("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 349
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
 testRunner.When("User selects \"Budgets\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 351
  testRunner.And("User enters \"ShortName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 352
  testRunner.And("User enters \"OverMaxLengthDescription\" in \'Description\' field (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
  testRunner.And("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 354
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 355
 testRunner.Then("\'Category/Subcategory dropdown\' error is \'Hidden\' with message \'Error: Category m" +
                        "ust be specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 356
  testRunner.And("\'Term Name field empty\' error is \'Hidden\' with message \'Error: Term Name must be " +
                        "specified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 357
  testRunner.And("\'Term Name field length\' error is \'Hidden\' with message \'Error: Term Name has exc" +
                        "eeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 358
  testRunner.And("\'Description field length\' error is \'Shown\' with message \'Error: Description has " +
                        "exceeded maximum of 256 characters.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 359
  testRunner.And("\'Summary field empty\' error is \'Hidden\' with message \'Error: Summary must be spec" +
                        "ified.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 360
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a TERM with TermName that already exists")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void CreatingATERMWithTermNameThatAlreadyExists()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a TERM with TermName that already exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 363
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table6.AddRow(new string[] {
                            "KeyTerm",
                            "checked"});
                table6.AddRow(new string[] {
                            "Category",
                            "Basic Terms"});
                table6.AddRow(new string[] {
                            "TermName",
                            "ShortName"});
                table6.AddRow(new string[] {
                            "Description",
                            "ShortDescription"});
                table6.AddRow(new string[] {
                            "Summary",
                            "ShortSummary"});
#line 364
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table6, "Given ");
#line hidden
#line 371
  testRunner.And("User clicked \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 372
  testRunner.And("All fields are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 373
 testRunner.When("User selects \"Jurisdiction\" in \'Category/Subcategory\' dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 374
  testRunner.And("User enters \"ShortName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 375
  testRunner.And("User enters \"ShortDescription\" in \'Description\' field (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 376
  testRunner.And("User enters \"ShortSummary\" in \'Summary\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 377
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 378
 testRunner.Then("\'Name already exists\' error is \'Shown\' with message \'Error. Term Template with th" +
                        "e same name already exists.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 379
  testRunner.And("User closes \'Name already exists\' error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 380
  testRunner.And("User enters \"MaxLengthName\" in \'Term Name\' field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 381
  testRunner.And("User clicks \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 382
  testRunner.And("Alert with message \'Template has been saved\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 383
  testRunner.And("User searches for \"ShortName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 384
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 385
  testRunner.And("User searches for \"MaxLengthName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 386
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 387
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 388
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 389
  testRunner.And("User checks the Template with name \"MaxLengthName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleting not existing TERM errors")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.CategoryAttribute("ErrorMessage")]
        public virtual void DeletingNotExistingTERMErrors()
        {
            string[] tagsOfScenario = new string[] {
                    "NegativeTest",
                    "ErrorMessage"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting not existing TERM errors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 393
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table7.AddRow(new string[] {
                            "KeyTerm",
                            "unchecked"});
                table7.AddRow(new string[] {
                            "Category",
                            "Basic Terms"});
                table7.AddRow(new string[] {
                            "TermName",
                            "ShortName"});
                table7.AddRow(new string[] {
                            "Description",
                            "ShortDescription"});
                table7.AddRow(new string[] {
                            "Summary",
                            "ShortSummary"});
#line 394
 testRunner.Given("There is existing TERM with the following parameters:", ((string)(null)), table7, "Given ");
#line hidden
#line 401
 testRunner.When("User searches for \"ShortName\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 402
  testRunner.And("User double-clicks \'Delete button\' to delete the term", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 403
 testRunner.Then("\'Term not found (ID)\' error is \'Shown\' with message \'Error. The term definition i" +
                        "s not found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 404
  testRunner.And("\'Requested Resource is not found\' error is \'Shown\' with message \'The requested re" +
                        "source is not found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 405
  testRunner.And("User checks the Template with name \"ShortName\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if predinstalled TERM has Category/Subcategory dropdown and Delete button h" +
            "idden")]
        [NUnit.Framework.CategoryAttribute("PositiveTest")]
        public virtual void CheckIfPredinstalledTERMHasCategorySubcategoryDropdownAndDeleteButtonHidden()
        {
            string[] tagsOfScenario = new string[] {
                    "PositiveTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if predinstalled TERM has Category/Subcategory dropdown and Delete button h" +
                    "idden", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 409
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 410
 testRunner.Given("User on the template creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 411
 testRunner.When("User searches for \"Client Waiver Requirement\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 412
 testRunner.Then("\'Delete button\' is hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 413
  testRunner.And("\'Category/Subcategory\' dropdown is hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Import Templates")]
        [NUnit.Framework.CategoryAttribute("PositiveTest")]
        public virtual void ImportTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "PositiveTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import Templates", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 420
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 421
 testRunner.Given("User checks the Template with name \"Name import\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 422
  testRunner.And("User on the template creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 423
  testRunner.And("User clicked \'action arrow\' of the \'create new template\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 424
 testRunner.When("User clicks \'Import Templates\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 425
  testRunner.And("User selects file \"D:\\TermTemplateDefinition.ixt\" to upload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 426
  testRunner.And("\'Choose file to import\' element contains \"TermTemplateDefinition.ixt\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 427
  testRunner.And("User clicks \'Import\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 428
 testRunner.Then("Alert with message \'All templates have been imported successfully! Please ensure " +
                        "new templates work with existing Terms Rules.\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 429
  testRunner.And("User searches for \"Name import\" in \'Search field\' and clicks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
  testRunner.And("Template has \"checked\" state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 431
  testRunner.And("Template has \'Category/Subcategory\' like \"Invoices\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 432
  testRunner.And("Template has \'Term Name\' like \"Name import\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 433
  testRunner.And("Template has \'Term Template Key\' like \"Name import\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 434
  testRunner.And("Template has \'Description\' like \"Description import\" (if provided)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 435
  testRunner.And("Template has \'Summary\' like \"Summary import\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 436
  testRunner.And("User clicks \'Delete\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 437
  testRunner.And("Alert with message \'Template has been removed\' appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 438
  testRunner.And("User checks the Template with name \"Name import\" not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
